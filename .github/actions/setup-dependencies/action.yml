name: Setup Dependencies

inputs:
  use_ccache:
    description: "Indicates whether to install and configure ccache"
    type: choice
    required: true
    default: "true"
    options:
      - true
      - false

runs:
  using: "composite"
  steps:
    # ———— Linux and macOS ———— #
    - name: Set Linux MAKEFLAGS
      run: echo "MAKEFLAGS=-j$(nproc) V=1" >> $GITHUB_ENV
      shell: bash
      if: runner.os == 'Linux'

    - name: Set macOS MAKEFLAGS
      run: echo "MAKEFLAGS=-j$(sysctl -n hw.ncpu) V=1" >> $GITHUB_ENV
      shell: bash
      if: runner.os == 'macOS'

    # Python3 is already installed though Homebrew
    - name: Install brew dependencies
      run: brew install ruby node php lmdb mcpp || true
      shell: bash
      if: runner.os == 'macOS'

    - name: Add Ruby and Python interpreters from brew to PATH
      run: |
        echo "$(brew --prefix ruby)/bin" >> $GITHUB_PATH
        echo "$(brew --prefix python3)/bin" >> $GITHUB_PATH
      shell: bash
      if: runner.os == 'macOS'

    - name: Install testing dependencies from pip
      run: python3 -m pip install --break-system-packages --user passlib cryptography numpy
      shell: bash
      if: runner.os == 'macOS'

    - name: Install xcodeproj gem
      run: gem install xcodeproj
      shell: bash
      if: runner.os == 'macOS'

    - name: Install xcodesdk dependencies
      run: |
        # We should consider removing the dependency on ice-xcode-builder
        brew install zeroc-ice/tap/ice-builder-xcode
      shell: bash
      if: (runner.os == 'macOS') && (matrix.config == 'xcodesdk')

    - name: Install apt dependencies
      run: |
        sudo apt-get update && sudo apt-get install -y \
            python3 python3-pip nodejs libbz2-dev libssl-dev libffi-dev \
            libmcpp-dev libedit-dev liblmdb-dev libexpat1-dev libsystemd-dev \
            ruby ruby-dev php-cli php-dev \
            libbluetooth-dev libdbus-1-dev \
            libsystemd-dev
      shell: bash
      if: runner.os == 'Linux'

    - name: Setup Oracle Java 17
      uses: actions/setup-java@v4
      with:
        distribution: "oracle"
        java-version: "17"

    - name: Setup .NET 8
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.x

    - name: Install testing dependencies from pip
      run: python3 -m pip install passlib cryptography numpy
      shell: bash
      if: runner.os == 'Linux'

    # ———— Windows ———— #
    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v2
      with:
        msbuild-architecture: x64
      if: runner.os == 'Windows'

    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.12"
      if: runner.os == 'Windows'

    - name: Configure Windows Python Environment
      run: |
        echo "PythonHome=$env:Python_ROOT_DIR"  >> $env:GITHUB_ENV
      shell: powershell
      if: runner.os == 'Windows'

    # # This choco install will overwrite the existing Python installation
    # - name: Setup Debug Python
    #   run: |
    #     choco install python312 --installargs='/quiet Include_debug=1' -y --no-progress
    #   shell: powershell
    #   if: runner.os == 'Windows' && matrix.config == 'debug'
    - name: Install testing dependencies from pip
      run: python3 -m pip install passlib cryptography numpy
      shell: powershell
      if: runner.os == 'Windows'

    # ———— MATLAB ———— #
    - name: Setup MATLAB
      id: setup-matlab
      uses: matlab-actions/setup-matlab@v2
      with:
        release: "R2024a"
      if: matrix.config == 'matlab'

    - name: Set MATLAB_HOME and MATLAB_VERSION
      run: |
        # Needed for MATLAB R2024a
        sudo apt install -y libgtk2.0-0
        echo "MATLAB_VERSION=R2024a" >> $GITHUB_ENV
        echo "MATLAB_HOME=${{ steps.setup-matlab.outputs.matlabroot }}" >> $GITHUB_ENV
      shell: bash
      if: runner.os == 'Linux' && matrix.config == 'matlab'

    - name: Set MATLAB_HOME and MATLAB_VERSION
      run: |
        echo "MATLAB_VERSION=R2024a" >> $env:GITHUB_ENV
        echo "MATLAB_HOME=${{ steps.setup-matlab.outputs.matlabroot }}" >> $env:GITHUB_ENV
      shell: powershell
      if: runner.os == 'Windows' && matrix.config == 'matlab'

    # https://github.com/matlab-actions/run-command/issues/53
    - name: Get run-matlab-command
      run: |
        wget -O /usr/local/bin/run-matlab-command https://ssd.mathworks.com/supportfiles/ci/run-matlab-command/v2/glnxa64/run-matlab-command
        chmod +x /usr/local/bin/run-matlab-command
        echo "MATLAB_COMMAND=/usr/local/bin/run-matlab-command" >> $GITHUB_ENV

        # https://www.mathworks.com/matlabcentral/answers/1907290-how-to-manually-select-the-libstdc-library-to-use-to-resolve-a-version-glibcxx_-not-found
        echo "LD_PRELOAD=/lib/x86_64-linux-gnu/libstdc++.so.6" >> $GITHUB_ENV

      shell: bash
      if: runner.os == 'Linux' && matrix.config == 'matlab'

    # Windows is currently not working. We get an error: "'matlab' executable not found on the system path"
    # However, MATLAB is installed and the path is (seemingly) set correctly
    - name: Get run-matlab-command
      run: |
        Invoke-WebRequest https://ssd.mathworks.com/supportfiles/ci/run-matlab-command/v2/win64/run-matlab-command.exe -OutFile C:\Windows\System32\run-matlab-command.exe
        echo "MATLAB_COMMAND=C:\Windows\System32\run-matlab-command.exe" >> $env:GITHUB_ENV
      shell: powershell
      if: runner.os == 'Windows' && matrix.config == 'matlab'

    # ———— Cache ———— #
    - name: Setup ccache
      uses: hendrikmuhs/ccache-action@v1.2
      with:
        # create-symlink: true
        append-timestamp: false
        key: ci-${{ runner.os }}-${{ matrix.config }}-${{ github.sha }}
        restore-keys: |
          ci-${{ runner.os }}-${{ matrix.config }}-
          ci-${{ runner.os }}-
      if: inputs.use_ccache == 'true' && (runner.os == 'macOS' || runner.os == 'Linux')

    - name: Configure ccache path
      run: |
        echo "/usr/lib/ccache" >> $GITHUB_PATH
        echo "/usr/local/opt/ccache/libexec" >> $GITHUB_PATH
        echo "/opt/homebrew/opt/ccache/libexec" >> $GITHUB_PATH
      shell: bash
      if: inputs.use_ccache == 'true' && (runner.os == 'macOS' || runner.os == 'Linux')

    # - name: Setup Windows Cache
    #   uses: actions/cache@v4
    #   with:
    #     path: |
    #       **/bin/x64
    #       **/lib/x64
    #       **/msbuild/**/x64
    #       **/include/generated

    #     key: ci-${{ runner.os }}-${{ matrix.config }}-${{ github.sha }}
    #     restore-keys: |
    #       ci-${{ runner.os }}-${{ matrix.config }}-
    #       ci-${{ runner.os }}-
    #   if: inputs.cache && runner.os == 'Windows'
