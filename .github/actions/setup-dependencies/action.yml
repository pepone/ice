name: Setup Dependencies

inputs:
  use_matlab:
    description: "Indicates whether to install and configure MATLAB"
    type: choice
    required: true
    default: "false"
    options:
      - true
      - false
  use_ccache:
    description: "Indicates whether to install and configure ccache"
    type: choice
    required: true
    default: "true"
    options:
      - true
      - false

runs:
  using: "composite"
  steps:
    #
    # General Setup (Python, Ruby, Node, Java, .NET, etc.)
    #
    - uses: actions/setup-python@v5
      with:
        python-version: "3.13"

    - uses: ruby/setup-ruby@v1
      with:
        ruby-version: "3.3"
      if: runner.os != 'Windows'

    - uses: actions/setup-node@v4
      with:
        node-version: "20"

    - name: Setup Oracle Java 17
      uses: actions/setup-java@v4
      with:
        distribution: "oracle"
        java-version: "17"

    - name: Setup .NET 8
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.x

    - name: Install testing dependencies from pip
      run: python3 -m pip install passlib cryptography numpy
      shell: bash

    #
    # macOS
    #
    - name: Set macOS MAKEFLAGS
      run: echo "MAKEFLAGS=-j$(sysctl -n hw.ncpu) V=1" >> $GITHUB_ENV
      shell: bash
      if: runner.os == 'macOS'

    - name: Install brew dependencies
      run: brew install php lmdb mcpp
      shell: bash
      if: runner.os == 'macOS'

    - name: Install ios dependencies
      run: |
        # We should consider removing the dependency on ice-builder-xcode
        brew install zeroc-ice/tap/ice-builder-xcode
      shell: bash
      if: (runner.os == 'macOS') && (matrix.config == 'ios')

    #
    # Linux
    #
    - name: Set Linux MAKEFLAGS
      run: echo "MAKEFLAGS=-j$(nproc) V=1" >> $GITHUB_ENV
      shell: bash
      if: runner.os == 'Linux'

    - name: Install apt dependencies
      run: |
        sudo apt-get update && sudo apt-get install -y \
            libbz2-dev libssl-dev libffi-dev \
            libmcpp-dev libedit-dev liblmdb-dev libexpat1-dev libsystemd-dev \
            php-cli php-dev \
            libbluetooth-dev libdbus-1-dev \
            libsystemd-dev
      shell: bash
      if: runner.os == 'Linux'

    #
    # Windows
    #
    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v2
      with:
        msbuild-architecture: x64
      if: runner.os == 'Windows'

    - name: Configure Windows Python Environment
      run: |
        echo "PythonHome=$env:Python_ROOT_DIR"  >> $env:GITHUB_ENV
      shell: powershell
      if: runner.os == 'Windows'

    #
    # MATLAB
    #
    - name: Setup Dependencies
      uses: ./.github/actions/setup-matlab
      if: inputs.use_matlab == 'true'

    #
    # Android
    #

    # See https://github.com/marketplace/actions/android-emulator-runner
    - name: Enable KVM group perms
      shell: bash
      run: |
        echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
        sudo udevadm control --reload-rules
        sudo udevadm trigger --name-match=kvm
      if: matrix.config == 'android'

    - name: Android SDK and PATH
      shell: bash
      run: |
        echo "$ANDROID_HOME/cmdline-tools/latest/bin" >> $GITHUB_PATH
        echo "$ANDROID_HOME/emulator" >> $GITHUB_PATH
        echo "$ANDROID_HOME/platform-tools" >> $GITHUB_PATH
        # For some reason avdmanager is placing the avd into $HOME/.config/.android/avd instead of $HOME/.android/avd
        echo "ANDROID_AVD_HOME=$HOME/.config/.android" >> $GITHUB_ENV
      if: matrix.config == 'android'

    - name: Configure Android SDK
      shell: bash
      run: |
        sdkmanager "platform-tools" "build-tools;34.0.0" "platforms;android-34"
        sdkmanager "system-images;android-34;google_apis;x86_64"
        sdkmanager emulator
        sdkmanager --update
      if: matrix.config == 'android'

    #
    # Cache
    #
    - name: Setup ccache
      uses: hendrikmuhs/ccache-action@v1.2
      with:
        # create-symlink: true
        append-timestamp: false
        key: ci-${{ runner.os }}-${{ matrix.config }}-${{ github.sha }}
        restore-keys: |
          ci-${{ runner.os }}-${{ matrix.config }}-
          ci-${{ runner.os }}-
      if: inputs.use_ccache == 'true' && (runner.os == 'macOS' || runner.os == 'Linux')

    - name: Configure ccache path
      run: |
        echo "/usr/lib/ccache" >> $GITHUB_PATH
        echo "/usr/local/opt/ccache/libexec" >> $GITHUB_PATH
        echo "/opt/homebrew/opt/ccache/libexec" >> $GITHUB_PATH
      shell: bash
      if: inputs.use_ccache == 'true' && (runner.os == 'macOS' || runner.os == 'Linux')

    # - name: Setup Windows Cache
    #   uses: actions/cache@v4
    #   with:
    #     path: |
    #       **/bin/x64
    #       **/lib/x64
    #       **/msbuild/**/x64
    #       **/include/generated

    #     key: ci-${{ runner.os }}-${{ matrix.config }}-${{ github.sha }}
    #     restore-keys: |
    #       ci-${{ runner.os }}-${{ matrix.config }}-
    #       ci-${{ runner.os }}-
    #   if: inputs.cache && runner.os == 'Windows'
