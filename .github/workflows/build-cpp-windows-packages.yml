name: "Build C++ Windows Packages"

on:
  workflow_call:
    inputs:
      ice_version:
        required: false
        type: string
      nuget_source_url:
        required: false
        type: string
      repository_url:
        required: false
        type: string
      repository_username:
        required: false
        type: string
    secrets:
      NUGET_API_KEY:
        required: false
  workflow_dispatch:
    inputs:
      ice_version:
        description: "The Ice version to build"
        required: false
      nuget_source_url:
        description: "The URL of the NuGet repository to publish to"
        required: false
        type: string
      repository_url:
          description: "The URL of the repository to upload MSI to"
          required: false
          type: string
      repository_username:
        description: "The username to authenticate with the repository"
        required: false
        type: string

jobs:
  build-cpp-nuget-package:
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup C++
        uses: ./.github/actions/setup-cpp

      - name: Setup Java
        uses: ./ice/.github/actions/setup-java

      - name: Build C++ NuGet Packages
        run: msbuild /m ice.proj /t:Pack /p:BuildAllConfigurations=yes /p:IcePackageVersion="${{ inputs.ice_version }}"
        working-directory: cpp/msbuild

      - name: Build IceGrid GUI
        run: |
          nuget restore ..\cpp\msbuild\ice.sln
          MSBuild ..\cpp\msbuild\ice.sln /t:"slice2java;ice2slice" /p:Configuration=Release /p:Platform=x64
          ./gradlew.bat dist -PcppPlatform=x64 -PcppConfiguration=Release
        working-directory: ice/java

      - name: Build MSI
        run: dotnet build -c Release -p:Platform=x64
        working-directory: ice/packaging/msi
        env:
          StagingDir: "${{ github.workspace }}\\staging"
          # TODO compute this variable see issue #3558
          VCInstallDir: "C:\\Program Files\\Microsoft Visual Studio\\2022\\Enterprise\\VC"

      # Upload artifacts
      - name: Upload MSI
        uses: actions/upload-artifact@v4
        with:
          name: windows-msi
          path: |
            ice/packaging/msi/bin/x64/Release/*.msi

      - name: Upload NuGet Packages
        uses: actions/upload-artifact@v4
        with:
          name: windows-cpp-nuget-packages
          path: |
            cpp/msbuild/ZeroC.Ice.Cpp/*.nupkg

      - name: Publish NuGet Packages
        run: |
          $packages = @(
              Get-ChildItem -Path cpp\msbuild\ZeroC.Ice.Cpp -Filter "*.nupkg" -File -Recurse
              Get-ChildItem -Path cpp\msbuild\ZeroC.Ice.Cpp -Filter "*.snupkg" -File -Recurse
          )

          foreach ($package in $packages) {
              Write-Host "Publishing package: $($package.FullName)"
              nuget push $package.FullName -Source ${{ inputs.nuget_source_url }} -ApiKey ${{ secrets.NUGET_API_KEY }}
              if ($LASTEXITCODE -ne 0) { throw "nuget push failed" }
          }
        if: inputs.nuget_source_url != ''

      - name: Publish MSI
        shell: bash
        run: |
          curl -u "${REPOSITORY_USERNAME}:${REPOSITORY_PASSWORD}" \
              --upload-file ice/packaging/msi/bin/x64/Release/*.msi \
              --output /dev/null \
              --silent \
              --retry 3 \
              --fail \
              --show-error \
              ${{ inputs.repository_url }}/ || { echo "Upload failed"; exit 1; }
        if: inputs.repository_url != ''
        env:
          REPOSITORY_USERNAME: ${{ inputs.repository_username }}
          REPOSITORY_PASSWORD: ${{ secrets.REPOSITORY_PASSWORD }}
