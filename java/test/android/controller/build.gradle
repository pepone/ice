// Copyright (c) ZeroC, Inc.

buildscript {
    repositories {
        google()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:8.9.0'
        classpath 'gradle.plugin.com.zeroc.gradle.ice-builder:slice:1.5.0'
    }
}

plugins {
    id 'com.zeroc.ice.slice-tools' apply false
}

apply plugin: 'com.android.application'
apply plugin: 'com.zeroc.ice.slice-tools'

def topSrcDir = new File("$rootProject.projectDir/../../../..").getCanonicalPath()

slice {
    def defaultIceToolsPath = "${topSrcDir}/cpp/bin"

    if (org.gradle.internal.os.OperatingSystem.current().isWindows()) {
        def platform = project.findProperty("cppPlatform") ?: "x64"
        def configuration = project.findProperty("cppConfiguration") ?: "Release"
        toolsPath = "$defaultIceToolsPath/$platform/$configuration"
    } else {
        toolsPath = defaultIceToolsPath
    }
}

repositories {
    repositories {
        flatDir dirs: "file://${topSrcDir}/java/lib"
    }

    google()
    mavenCentral()
}

android {
    compileSdk 34

    defaultConfig {
        applicationId "com.zeroc.testcontroller"
        minSdkVersion 34 // SDK 34 required for Java 17 compatibility
        targetSdkVersion 34
        multiDexEnabled true // Necessary otherwise we'd exceed the 64K DEX limit.
        compileOptions {
            // Sets Java compatibility to Java 17
            sourceCompatibility JavaVersion.VERSION_17
            targetCompatibility JavaVersion.VERSION_17
        }
    }

    buildFeatures {
        buildConfig true
    }

    buildTypes {
        debug {
            // Set minifyEnabled to false because the test app loads classes dynamically.
            minifyEnabled false
        }

        release {
            // Set minifyEnabled to false because the test app loads classes dynamically.
            minifyEnabled false
        }
    }
    namespace 'com.zeroc.testcontroller'

    sourceSets {
        main {
            slice {
                srcDir "$topSrcDir/scripts"
            }
        }
    }
}

task copyBksTask(type: Copy) {
    from "${rootProject.projectDir}/../../../../certs/client.bks"
    from "${rootProject.projectDir}/../../../../certs/server.bks"
    into "src/main/res/raw"
}
preBuild.dependsOn(copyBksTask)

clean {
    delete("src/main/res/raw/client.bks")
    delete("src/main/res/raw/server.bks")
}

dependencies {
    implementation ":glacier2-${project.iceVersion}"
    implementation ":ice-${project.iceVersion}"
    runtimeOnly ":icediscovery-${project.iceVersion}"
    runtimeOnly ":icebt-${project.iceVersion}"

    implementation files("${rootProject.projectDir}/../../../lib/test.jar")
    runtimeOnly "org.apache.commons:commons-compress:1.20"
}
