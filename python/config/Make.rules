# Copyright (c) ZeroC, Inc.

#
# If multiple versions of Python are installed and you want a specific
# version to be used for building the Ice extension, set PYTHON to the
# location of the python interpreter.
#
PYTHON              ?= python3

# ----------------------------------------------------------------------
# Don't change anything below this line!
# ----------------------------------------------------------------------

-include        $(lang_srcdir)/config/Make.rules.$(os)

# PYTHON must be set to a value that has a corresponding PYTHON-config
python-config := $(PYTHON)-config

ifeq ($(os),Linux)
   cppflags   := $(filter-out -Wredundant-decls,$(cppflags))
endif

python_cppflags         := $(or $(PYTHON_CPPFLAGS),$(shell $(python-config) --cflags))
python_ldflags          := $(or $(PYTHON_LDLFLAGS),$(shell $(python-config) --ldflags))

# Use .so as default value --extension-suffix is not supported by python-config in all platforms
python_extsuffix        := $(or $(shell $(python-config) --extension-suffix 2> /dev/null),.so)

# As of Python 3.8 the python library is not included in the ldflags
# This is also the same behavior used by pip
allow-undefined-symbols := yes

# Debian packaging complains if these libraries are included
ifneq ($(filter debian ubuntu,$(linux_id)),)
python_ldflags          := $(filter-out -lpython% -ldl -lutil,$(python_ldflags))
endif

ifneq ($(OPTIMIZE),yes)
# Remove optimization options if building debug build
python_cppflags         := $(filter-out -O% -DNDEBUG -Wp$(comma)-D_FORTIFY_SOURCE=%,$(python_cppflags))
endif

# Disable the warning about missing field initializers
python_cppflags         := $(python_cppflags) -Wno-missing-field-initializers

#
# Python installation directory
#
install_pythondir       = $(or $(PYTHON_INSTALLDIR),$(shell $(PYTHON) $(lang_srcdir)/config/install_dir $(prefix)))

#
# Rules to build a python module. We just compute the name of the python module
# and delegate to make-shared-module.
#
mkpymodulename                   ?= $(patsubst lib%.so,%$(python_extsuffix),$(call mkshlibname,$(1)))
make-shared-python-module        = $(call make-shared-module,$(call mkpymodulename,$1),$2,$3,$4,$5,$6,$7,$8,$9)
get-shared-python-module-targets = $(call get-shared-module-targets,$(call mkpymodulename,$1),$2,$3,$4)
install-shared-python-module     = $(call install-shared-module,$(call mkpymodulename,$1),$2,$3,$4,$5)

$(DESTDIR)$(install_pythondir):
	$(Q)$(MKDIR) -p $@
installdirs += $(install_pythondir)

# Usage:
#   $(eval $(call make-python-module,Ice))
#
# Assumes:
#   - Slice files are in $(top_srcdir)/slice/$(1)/*.ice
#   - Generated files go in $(1)/...
#   - .depend, .d files go in $(1)/.depend/...

define make-python-module

# Variables for $(1) module
STAMPS_$1 := $(patsubst $(top_srcdir)/slice/$1/%.ice,$(1)/.depend/%.depend,$(wildcard $(top_srcdir)/slice/$1/*.ice))

$1/.depend:
	mkdir -p $$@

# Rule to generate stamp file from .ice
$1/.depend/%.depend: $(top_srcdir)/slice/$1/%.ice $(slice2py_path) | $1/.depend
	@echo "Compiling $$<"
	$$(Q)$$(slice2py_path) -I$(top_srcdir)/slice --output-dir=. --list-generated modules $$< > $$@
	$$(Q)$$(slice2py_path) -I$(top_srcdir)/slice --output-dir=. --build modules $$<

ifeq ($$(filter %clean,$$(MAKECMDGOALS)),)
  -include $$(patsubst %.depend,%.d,$$(STAMPS_$1))
endif

# Add to build target
generated-srcs all:: $$(STAMPS_$1)

srcs:: generated-srcs

# Clean rule
clean::
	@echo "Cleaning generated Python files for $1..."
	@if [ -d $1/.depend ]; then \
	  find $1/.depend -name '*.depend' -exec cat {} + 2>/dev/null | xargs rm -f; \
	  $$(RM) -f $1/.depend/*.depend $1/.depend/*.d; \
	  rmdir $1/.depend 2>/dev/null || true; \
	fi

endef

# Usage:
#   $(eval $(call make-python-package,Glacier2,$(GLACIER2_FILES)))

define make-python-package
$1/__init__.py: $2 $(slice2py_path)
	$(Q)$(MKDIR) -p $(dir $$@)
	$(E) "Creating $1 package"
	$$(Q)$$(slice2py_path) -I$(top_srcdir)/slice --output-dir=. --build index $2

generated-srcs all:: $1/__init__.py

srcs:: generated-srcs

clean::
	$(E) "Cleaning Python package $1..."
	$(Q)$(RM) -f $1/__init__.py

$(DESTDIR)$(install_pythondir)/$1:
	$(Q)$(MKDIR) -p $(DESTDIR)$(install_pythondir)/$1

install:: | $(DESTDIR)$(install_pythondir)/$1
	$(E) "Installing $1 python code"
	$(Q)$(INSTALL) -m 644 $1/*.py $(DESTDIR)$(install_pythondir)/$1

endef

#
# $(call make-python-test-project,$1=testdir)
#
define make-python-test-project

$1_slices=$(wildcard $1/*.ice)

ifneq ($$($1_slices),)
$1/.depend: $$($1_slices) $(slice2py_path)
	$(E) "Compiling $1 $$<"
	$(Q) mkdir -p $1
	$(Q)$(slice2py_path) $(slice2py_flags) -I$(slicedir) -I$1 --output-dir $1 $$($1_sliceflags) $$($1_slices)
	$(Q)touch $1/.depend

generated-srcs all:: $1/.depend
endif

endef
